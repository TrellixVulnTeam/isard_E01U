// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package diskoperations

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DiskOperationsClient is the client API for DiskOperations service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiskOperationsClient interface {
	DiskCreate(ctx context.Context, in *DiskCreateRequest, opts ...grpc.CallOption) (*DiskCreateResponse, error)
}

type diskOperationsClient struct {
	cc grpc.ClientConnInterface
}

func NewDiskOperationsClient(cc grpc.ClientConnInterface) DiskOperationsClient {
	return &diskOperationsClient{cc}
}

func (c *diskOperationsClient) DiskCreate(ctx context.Context, in *DiskCreateRequest, opts ...grpc.CallOption) (*DiskCreateResponse, error) {
	out := new(DiskCreateResponse)
	err := c.cc.Invoke(ctx, "/com.gitlab.isard.isardvdi.diskoperations.DiskOperations/DiskCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiskOperationsServer is the server API for DiskOperations service.
// All implementations must embed UnimplementedDiskOperationsServer
// for forward compatibility
type DiskOperationsServer interface {
	DiskCreate(context.Context, *DiskCreateRequest) (*DiskCreateResponse, error)
	mustEmbedUnimplementedDiskOperationsServer()
}

// UnimplementedDiskOperationsServer must be embedded to have forward compatible implementations.
type UnimplementedDiskOperationsServer struct {
}

func (UnimplementedDiskOperationsServer) DiskCreate(context.Context, *DiskCreateRequest) (*DiskCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiskCreate not implemented")
}
func (UnimplementedDiskOperationsServer) mustEmbedUnimplementedDiskOperationsServer() {}

// UnsafeDiskOperationsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiskOperationsServer will
// result in compilation errors.
type UnsafeDiskOperationsServer interface {
	mustEmbedUnimplementedDiskOperationsServer()
}

func RegisterDiskOperationsServer(s grpc.ServiceRegistrar, srv DiskOperationsServer) {
	s.RegisterService(&DiskOperations_ServiceDesc, srv)
}

func _DiskOperations_DiskCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiskCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiskOperationsServer).DiskCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gitlab.isard.isardvdi.diskoperations.DiskOperations/DiskCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiskOperationsServer).DiskCreate(ctx, req.(*DiskCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DiskOperations_ServiceDesc is the grpc.ServiceDesc for DiskOperations service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DiskOperations_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.gitlab.isard.isardvdi.diskoperations.DiskOperations",
	HandlerType: (*DiskOperationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DiskCreate",
			Handler:    _DiskOperations_DiskCreate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/diskoperations/diskoperations.proto",
}
