// Code generated by protoc-gen-go-grpc-mock (https://github.com/nefixestrada/protoc-gen-go-grpc-mock). DO NOT EDIT.
// version: v0.2.0

package diskoperations

import (
	context "context"
	mock "github.com/stretchr/testify/mock"
	grpc "google.golang.org/grpc"
	net "net"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// NewDiskOperationsServiceMock creates and starts a DiskOperations service mock.
// it returns the mock and a client for the
func NewDiskOperationsServiceMock() (*DiskOperationsServiceMock, DiskOperationsClient, error) {
	addr, err := net.ResolveTCPAddr("tcp", "localhost:0")
	if err != nil {
		return nil, nil, err
	}

	lis, err := net.ListenTCP("tcp", addr)
	if err != nil {
		return nil, nil, err
	}

	s := grpc.NewServer()
	m := &DiskOperationsServiceMock{server: s}

	RegisterDiskOperationsServer(s, m)

	go s.Serve(lis)

	cc, err := grpc.Dial(lis.Addr().String(), grpc.WithInsecure())
	if err != nil {
		return nil, nil, err
	}
	m.cc = cc

	cli := NewDiskOperationsClient(cc)

	return m, cli, nil
}

// DiskOperationsServiceMock is a mock for the DiskOperationsService service.
type DiskOperationsServiceMock struct {
	mock.Mock
	server *grpc.Server
	cc     *grpc.ClientConn
	UnimplementedDiskOperationsServer
}

func (m *DiskOperationsServiceMock) Stop() {
	m.cc.Close()
	m.server.Stop()
}

const DiskCreate = "DiskCreate"

func (m *DiskOperationsServiceMock) DiskCreate(ctx context.Context, in *DiskCreateRequest) (*DiskCreateResponse, error) {
	args := m.Called(ctx, in)
	return args.Get(0).(*DiskCreateResponse), args.Error(1)
}
