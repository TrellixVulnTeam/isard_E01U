// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// HyperClient is the client API for Hyper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HyperClient interface {
	DesktopStart(ctx context.Context, in *DesktopStartRequest, opts ...grpc.CallOption) (*DesktopStartResponse, error)
	DesktopStop(ctx context.Context, in *DesktopStopRequest, opts ...grpc.CallOption) (*DesktopStopResponse, error)
	DesktopState(ctx context.Context, in *DesktopStateRequest, opts ...grpc.CallOption) (*DesktopStateResponse, error)
	DesktopValidate(ctx context.Context, in *DesktopValidateRequest, opts ...grpc.CallOption) (*DesktopValidateResponse, error)
	DesktopSuspend(ctx context.Context, in *DesktopSuspendRequest, opts ...grpc.CallOption) (*DesktopSuspendResponse, error)
	DesktopResume(ctx context.Context, in *DesktopResumeRequest, opts ...grpc.CallOption) (*DesktopResumeResponse, error)
	DesktopSave(ctx context.Context, in *DesktopSaveRequest, opts ...grpc.CallOption) (*DesktopSaveResponse, error)
	DesktopRestore(ctx context.Context, in *DesktopRestoreRequest, opts ...grpc.CallOption) (*DesktopRestoreResponse, error)
	DesktopXMLGet(ctx context.Context, in *DesktopXMLGetRequest, opts ...grpc.CallOption) (*DesktopXMLGetResponse, error)
	DesktopList(ctx context.Context, in *DesktopListRequest, opts ...grpc.CallOption) (*DesktopListResponse, error)
	DesktopMigrate(ctx context.Context, in *DesktopMigrateRequest, opts ...grpc.CallOption) (*DesktopMigrateResponse, error)
}

type hyperClient struct {
	cc grpc.ClientConnInterface
}

func NewHyperClient(cc grpc.ClientConnInterface) HyperClient {
	return &hyperClient{cc}
}

func (c *hyperClient) DesktopStart(ctx context.Context, in *DesktopStartRequest, opts ...grpc.CallOption) (*DesktopStartResponse, error) {
	out := new(DesktopStartResponse)
	err := c.cc.Invoke(ctx, "/com.gitlab.isard.isardvdi.hyper.Hyper/DesktopStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperClient) DesktopStop(ctx context.Context, in *DesktopStopRequest, opts ...grpc.CallOption) (*DesktopStopResponse, error) {
	out := new(DesktopStopResponse)
	err := c.cc.Invoke(ctx, "/com.gitlab.isard.isardvdi.hyper.Hyper/DesktopStop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperClient) DesktopState(ctx context.Context, in *DesktopStateRequest, opts ...grpc.CallOption) (*DesktopStateResponse, error) {
	out := new(DesktopStateResponse)
	err := c.cc.Invoke(ctx, "/com.gitlab.isard.isardvdi.hyper.Hyper/DesktopState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperClient) DesktopValidate(ctx context.Context, in *DesktopValidateRequest, opts ...grpc.CallOption) (*DesktopValidateResponse, error) {
	out := new(DesktopValidateResponse)
	err := c.cc.Invoke(ctx, "/com.gitlab.isard.isardvdi.hyper.Hyper/DesktopValidate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperClient) DesktopSuspend(ctx context.Context, in *DesktopSuspendRequest, opts ...grpc.CallOption) (*DesktopSuspendResponse, error) {
	out := new(DesktopSuspendResponse)
	err := c.cc.Invoke(ctx, "/com.gitlab.isard.isardvdi.hyper.Hyper/DesktopSuspend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperClient) DesktopResume(ctx context.Context, in *DesktopResumeRequest, opts ...grpc.CallOption) (*DesktopResumeResponse, error) {
	out := new(DesktopResumeResponse)
	err := c.cc.Invoke(ctx, "/com.gitlab.isard.isardvdi.hyper.Hyper/DesktopResume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperClient) DesktopSave(ctx context.Context, in *DesktopSaveRequest, opts ...grpc.CallOption) (*DesktopSaveResponse, error) {
	out := new(DesktopSaveResponse)
	err := c.cc.Invoke(ctx, "/com.gitlab.isard.isardvdi.hyper.Hyper/DesktopSave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperClient) DesktopRestore(ctx context.Context, in *DesktopRestoreRequest, opts ...grpc.CallOption) (*DesktopRestoreResponse, error) {
	out := new(DesktopRestoreResponse)
	err := c.cc.Invoke(ctx, "/com.gitlab.isard.isardvdi.hyper.Hyper/DesktopRestore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperClient) DesktopXMLGet(ctx context.Context, in *DesktopXMLGetRequest, opts ...grpc.CallOption) (*DesktopXMLGetResponse, error) {
	out := new(DesktopXMLGetResponse)
	err := c.cc.Invoke(ctx, "/com.gitlab.isard.isardvdi.hyper.Hyper/DesktopXMLGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperClient) DesktopList(ctx context.Context, in *DesktopListRequest, opts ...grpc.CallOption) (*DesktopListResponse, error) {
	out := new(DesktopListResponse)
	err := c.cc.Invoke(ctx, "/com.gitlab.isard.isardvdi.hyper.Hyper/DesktopList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperClient) DesktopMigrate(ctx context.Context, in *DesktopMigrateRequest, opts ...grpc.CallOption) (*DesktopMigrateResponse, error) {
	out := new(DesktopMigrateResponse)
	err := c.cc.Invoke(ctx, "/com.gitlab.isard.isardvdi.hyper.Hyper/DesktopMigrate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HyperServer is the server API for Hyper service.
// All implementations must embed UnimplementedHyperServer
// for forward compatibility
type HyperServer interface {
	DesktopStart(context.Context, *DesktopStartRequest) (*DesktopStartResponse, error)
	DesktopStop(context.Context, *DesktopStopRequest) (*DesktopStopResponse, error)
	DesktopState(context.Context, *DesktopStateRequest) (*DesktopStateResponse, error)
	DesktopValidate(context.Context, *DesktopValidateRequest) (*DesktopValidateResponse, error)
	DesktopSuspend(context.Context, *DesktopSuspendRequest) (*DesktopSuspendResponse, error)
	DesktopResume(context.Context, *DesktopResumeRequest) (*DesktopResumeResponse, error)
	DesktopSave(context.Context, *DesktopSaveRequest) (*DesktopSaveResponse, error)
	DesktopRestore(context.Context, *DesktopRestoreRequest) (*DesktopRestoreResponse, error)
	DesktopXMLGet(context.Context, *DesktopXMLGetRequest) (*DesktopXMLGetResponse, error)
	DesktopList(context.Context, *DesktopListRequest) (*DesktopListResponse, error)
	DesktopMigrate(context.Context, *DesktopMigrateRequest) (*DesktopMigrateResponse, error)
	mustEmbedUnimplementedHyperServer()
}

// UnimplementedHyperServer must be embedded to have forward compatible implementations.
type UnimplementedHyperServer struct {
}

func (UnimplementedHyperServer) DesktopStart(context.Context, *DesktopStartRequest) (*DesktopStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DesktopStart not implemented")
}
func (UnimplementedHyperServer) DesktopStop(context.Context, *DesktopStopRequest) (*DesktopStopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DesktopStop not implemented")
}
func (UnimplementedHyperServer) DesktopState(context.Context, *DesktopStateRequest) (*DesktopStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DesktopState not implemented")
}
func (UnimplementedHyperServer) DesktopValidate(context.Context, *DesktopValidateRequest) (*DesktopValidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DesktopValidate not implemented")
}
func (UnimplementedHyperServer) DesktopSuspend(context.Context, *DesktopSuspendRequest) (*DesktopSuspendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DesktopSuspend not implemented")
}
func (UnimplementedHyperServer) DesktopResume(context.Context, *DesktopResumeRequest) (*DesktopResumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DesktopResume not implemented")
}
func (UnimplementedHyperServer) DesktopSave(context.Context, *DesktopSaveRequest) (*DesktopSaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DesktopSave not implemented")
}
func (UnimplementedHyperServer) DesktopRestore(context.Context, *DesktopRestoreRequest) (*DesktopRestoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DesktopRestore not implemented")
}
func (UnimplementedHyperServer) DesktopXMLGet(context.Context, *DesktopXMLGetRequest) (*DesktopXMLGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DesktopXMLGet not implemented")
}
func (UnimplementedHyperServer) DesktopList(context.Context, *DesktopListRequest) (*DesktopListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DesktopList not implemented")
}
func (UnimplementedHyperServer) DesktopMigrate(context.Context, *DesktopMigrateRequest) (*DesktopMigrateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DesktopMigrate not implemented")
}
func (UnimplementedHyperServer) mustEmbedUnimplementedHyperServer() {}

// UnsafeHyperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HyperServer will
// result in compilation errors.
type UnsafeHyperServer interface {
	mustEmbedUnimplementedHyperServer()
}

func RegisterHyperServer(s *grpc.Server, srv HyperServer) {
	s.RegisterService(&_Hyper_serviceDesc, srv)
}

func _Hyper_DesktopStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DesktopStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperServer).DesktopStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gitlab.isard.isardvdi.hyper.Hyper/DesktopStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperServer).DesktopStart(ctx, req.(*DesktopStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hyper_DesktopStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DesktopStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperServer).DesktopStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gitlab.isard.isardvdi.hyper.Hyper/DesktopStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperServer).DesktopStop(ctx, req.(*DesktopStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hyper_DesktopState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DesktopStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperServer).DesktopState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gitlab.isard.isardvdi.hyper.Hyper/DesktopState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperServer).DesktopState(ctx, req.(*DesktopStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hyper_DesktopValidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DesktopValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperServer).DesktopValidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gitlab.isard.isardvdi.hyper.Hyper/DesktopValidate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperServer).DesktopValidate(ctx, req.(*DesktopValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hyper_DesktopSuspend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DesktopSuspendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperServer).DesktopSuspend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gitlab.isard.isardvdi.hyper.Hyper/DesktopSuspend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperServer).DesktopSuspend(ctx, req.(*DesktopSuspendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hyper_DesktopResume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DesktopResumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperServer).DesktopResume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gitlab.isard.isardvdi.hyper.Hyper/DesktopResume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperServer).DesktopResume(ctx, req.(*DesktopResumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hyper_DesktopSave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DesktopSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperServer).DesktopSave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gitlab.isard.isardvdi.hyper.Hyper/DesktopSave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperServer).DesktopSave(ctx, req.(*DesktopSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hyper_DesktopRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DesktopRestoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperServer).DesktopRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gitlab.isard.isardvdi.hyper.Hyper/DesktopRestore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperServer).DesktopRestore(ctx, req.(*DesktopRestoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hyper_DesktopXMLGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DesktopXMLGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperServer).DesktopXMLGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gitlab.isard.isardvdi.hyper.Hyper/DesktopXMLGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperServer).DesktopXMLGet(ctx, req.(*DesktopXMLGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hyper_DesktopList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DesktopListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperServer).DesktopList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gitlab.isard.isardvdi.hyper.Hyper/DesktopList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperServer).DesktopList(ctx, req.(*DesktopListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hyper_DesktopMigrate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DesktopMigrateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperServer).DesktopMigrate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gitlab.isard.isardvdi.hyper.Hyper/DesktopMigrate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperServer).DesktopMigrate(ctx, req.(*DesktopMigrateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Hyper_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.gitlab.isard.isardvdi.hyper.Hyper",
	HandlerType: (*HyperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DesktopStart",
			Handler:    _Hyper_DesktopStart_Handler,
		},
		{
			MethodName: "DesktopStop",
			Handler:    _Hyper_DesktopStop_Handler,
		},
		{
			MethodName: "DesktopState",
			Handler:    _Hyper_DesktopState_Handler,
		},
		{
			MethodName: "DesktopValidate",
			Handler:    _Hyper_DesktopValidate_Handler,
		},
		{
			MethodName: "DesktopSuspend",
			Handler:    _Hyper_DesktopSuspend_Handler,
		},
		{
			MethodName: "DesktopResume",
			Handler:    _Hyper_DesktopResume_Handler,
		},
		{
			MethodName: "DesktopSave",
			Handler:    _Hyper_DesktopSave_Handler,
		},
		{
			MethodName: "DesktopRestore",
			Handler:    _Hyper_DesktopRestore_Handler,
		},
		{
			MethodName: "DesktopXMLGet",
			Handler:    _Hyper_DesktopXMLGet_Handler,
		},
		{
			MethodName: "DesktopList",
			Handler:    _Hyper_DesktopList_Handler,
		},
		{
			MethodName: "DesktopMigrate",
			Handler:    _Hyper_DesktopMigrate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/hyper.proto",
}
