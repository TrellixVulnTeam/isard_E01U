// Code generated by protoc-gen-go-grpc-mock (https://github.com/nefixestrada/protoc-gen-go-grpc-mock). DO NOT EDIT.
// version: v0.2.0

package proto

import (
	context "context"
	mock "github.com/stretchr/testify/mock"
	grpc "google.golang.org/grpc"
	net "net"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// NewHyperServiceMock creates and starts a Hyper service mock.
// it returns the mock and a client for the
func NewHyperServiceMock() (*HyperServiceMock, HyperClient, error) {
	addr, err := net.ResolveTCPAddr("tcp", "localhost:0")
	if err != nil {
		return nil, nil, err
	}

	lis, err := net.ListenTCP("tcp", addr)
	if err != nil {
		return nil, nil, err
	}

	s := grpc.NewServer()
	m := &HyperServiceMock{server: s}

	RegisterHyperServer(s, m)

	go s.Serve(lis)

	cc, err := grpc.Dial(lis.Addr().String(), grpc.WithInsecure())
	if err != nil {
		return nil, nil, err
	}
	m.cc = cc

	cli := NewHyperClient(cc)

	return m, cli, nil
}

// HyperServiceMock is a mock for the HyperService service.
type HyperServiceMock struct {
	mock.Mock
	server *grpc.Server
	cc     *grpc.ClientConn
	UnimplementedHyperServer
}

func (m *HyperServiceMock) Stop() {
	m.cc.Close()
	m.server.Stop()
}

const DesktopStart = "DesktopStart"

func (m *HyperServiceMock) DesktopStart(ctx context.Context, in *DesktopStartRequest) (*DesktopStartResponse, error) {
	args := m.Called(ctx, in)
	return args.Get(0).(*DesktopStartResponse), args.Error(1)
}

const DesktopStop = "DesktopStop"

func (m *HyperServiceMock) DesktopStop(ctx context.Context, in *DesktopStopRequest) (*DesktopStopResponse, error) {
	args := m.Called(ctx, in)
	return args.Get(0).(*DesktopStopResponse), args.Error(1)
}

const DesktopState = "DesktopState"

func (m *HyperServiceMock) DesktopState(ctx context.Context, in *DesktopStateRequest) (*DesktopStateResponse, error) {
	args := m.Called(ctx, in)
	return args.Get(0).(*DesktopStateResponse), args.Error(1)
}

const DesktopValidate = "DesktopValidate"

func (m *HyperServiceMock) DesktopValidate(ctx context.Context, in *DesktopValidateRequest) (*DesktopValidateResponse, error) {
	args := m.Called(ctx, in)
	return args.Get(0).(*DesktopValidateResponse), args.Error(1)
}

const DesktopSuspend = "DesktopSuspend"

func (m *HyperServiceMock) DesktopSuspend(ctx context.Context, in *DesktopSuspendRequest) (*DesktopSuspendResponse, error) {
	args := m.Called(ctx, in)
	return args.Get(0).(*DesktopSuspendResponse), args.Error(1)
}

const DesktopResume = "DesktopResume"

func (m *HyperServiceMock) DesktopResume(ctx context.Context, in *DesktopResumeRequest) (*DesktopResumeResponse, error) {
	args := m.Called(ctx, in)
	return args.Get(0).(*DesktopResumeResponse), args.Error(1)
}

const DesktopSave = "DesktopSave"

func (m *HyperServiceMock) DesktopSave(ctx context.Context, in *DesktopSaveRequest) (*DesktopSaveResponse, error) {
	args := m.Called(ctx, in)
	return args.Get(0).(*DesktopSaveResponse), args.Error(1)
}

const DesktopRestore = "DesktopRestore"

func (m *HyperServiceMock) DesktopRestore(ctx context.Context, in *DesktopRestoreRequest) (*DesktopRestoreResponse, error) {
	args := m.Called(ctx, in)
	return args.Get(0).(*DesktopRestoreResponse), args.Error(1)
}

const DesktopXMLGet = "DesktopXMLGet"

func (m *HyperServiceMock) DesktopXMLGet(ctx context.Context, in *DesktopXMLGetRequest) (*DesktopXMLGetResponse, error) {
	args := m.Called(ctx, in)
	return args.Get(0).(*DesktopXMLGetResponse), args.Error(1)
}

const DesktopList = "DesktopList"

func (m *HyperServiceMock) DesktopList(ctx context.Context, in *DesktopListRequest) (*DesktopListResponse, error) {
	args := m.Called(ctx, in)
	return args.Get(0).(*DesktopListResponse), args.Error(1)
}

const DesktopMigrate = "DesktopMigrate"

func (m *HyperServiceMock) DesktopMigrate(ctx context.Context, in *DesktopMigrateRequest) (*DesktopMigrateResponse, error) {
	args := m.Called(ctx, in)
	return args.Get(0).(*DesktopMigrateResponse), args.Error(1)
}
