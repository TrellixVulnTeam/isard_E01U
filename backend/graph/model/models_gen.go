// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Desktop struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type Viewer struct {
	Spice   *ViewerSpice   `json:"Spice"`
	VncHTML *ViewerVncHTML `json:"VNC_HTML"`
}

type ViewerSpice struct {
	FileContent string `json:"FileContent"`
}

type ViewerVncHTML struct {
	URL string `json:"URL"`
}

type Role string

const (
	RoleAdmin    Role = "ADMIN"
	RoleAdvanced Role = "ADVANCED"
	RoleUser     Role = "USER"
)

var AllRole = []Role{
	RoleAdmin,
	RoleAdvanced,
	RoleUser,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleAdvanced, RoleUser:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
