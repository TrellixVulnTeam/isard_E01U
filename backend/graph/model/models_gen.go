// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Desktop struct {
	ID          string    `json:"id"`
	Name        string    `json:"name"`
	Description *string   `json:"description"`
	Hardware    *Hardware `json:"hardware"`
}

type DesktopCreateInput struct {
	Name        string                      `json:"name"`
	Description *string                     `json:"description"`
	Hardware    *DesktopCreateInputHardware `json:"hardware"`
}

type DesktopCreateInputHardware struct {
	BaseID    string `json:"baseId"`
	Vcpus     int    `json:"vcpus"`
	MemoryMax int    `json:"memoryMax"`
	MemoryMin int    `json:"memoryMin"`
}

type DesktopCreatePayload struct {
	RecordID *string  `json:"recordId"`
	Record   *Desktop `json:"record"`
}

type DesktopDeletePayload struct {
	RecordID *string  `json:"recordId"`
	Record   *Desktop `json:"record"`
}

type DesktopDerivateInput struct {
	TemplateID  string  `json:"templateId"`
	Name        string  `json:"name"`
	Description *string `json:"description"`
}

type DesktopDerivatePayload struct {
	RecordID *string  `json:"recordId"`
	Record   *Desktop `json:"record"`
}

type DesktopStartPayload struct {
	RecordID *string  `json:"recordId"`
	Record   *Desktop `json:"record"`
	Viewer   *Viewer  `json:"viewer"`
}

type DesktopStopPayload struct {
	RecordID *string  `json:"recordId"`
	Record   *Desktop `json:"record"`
}

type DesktopTemplateInput struct {
	ID          string  `json:"id"`
	Name        string  `json:"name"`
	Description *string `json:"description"`
}

type DesktopTemplatePayload struct {
	RecordID *string   `json:"recordId"`
	Record   *Template `json:"record"`
}

type Disk struct {
	ID       string   `json:"id"`
	Type     DiskType `json:"type"`
	Enable   *bool    `json:"enable"`
	ReadOnly *bool    `json:"readOnly"`
}

type Hardware struct {
	Base      *HardwareBase `json:"base"`
	Vcpus     int           `json:"vcpus"`
	MemoryMax int           `json:"memoryMax"`
	MemoryMin int           `json:"memoryMin"`
	Disks     []*Disk       `json:"disks"`
}

type HardwareBase struct {
	ID          string  `json:"id"`
	Name        string  `json:"name"`
	Description *string `json:"description"`
	Os          string  `json:"os"`
	OsVariant   *string `json:"osVariant"`
	XML         string  `json:"xml"`
}

type HardwareBaseCreateInput struct {
	Name        string  `json:"name"`
	Description *string `json:"description"`
	Os          string  `json:"os"`
	OsVariant   *string `json:"osVariant"`
	XML         string  `json:"xml"`
}

type HardwareBaseCreatePayload struct {
	RecordID *string       `json:"recordId"`
	Record   *HardwareBase `json:"record"`
}

type LoginInput struct {
	Provider string  `json:"provider"`
	EntityID string  `json:"entityId"`
	Usr      *string `json:"usr"`
	Pwd      *string `json:"pwd"`
}

type LoginPayload struct {
	Token   string `json:"token"`
	ID      string `json:"id"`
	Name    string `json:"name"`
	Surname string `json:"surname"`
}

type Template struct {
	ID          string    `json:"id"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	Hardware    *Hardware `json:"hardware"`
}

type TemplateDeletePayload struct {
	RecordID *string   `json:"recordId"`
	Record   *Template `json:"record"`
}

type Viewer struct {
	Spice   *ViewerSpice   `json:"spice"`
	VncHTML *ViewerVncHTML `json:"vncHtml"`
}

type ViewerSpice struct {
	File string `json:"file"`
}

type ViewerVncHTML struct {
	URL string `json:"url"`
}

type DiskType string

const (
	DiskTypeUnknown DiskType = "UNKNOWN"
	DiskTypeQcow2   DiskType = "QCOW2"
	DiskTypeRaw     DiskType = "RAW"
)

var AllDiskType = []DiskType{
	DiskTypeUnknown,
	DiskTypeQcow2,
	DiskTypeRaw,
}

func (e DiskType) IsValid() bool {
	switch e {
	case DiskTypeUnknown, DiskTypeQcow2, DiskTypeRaw:
		return true
	}
	return false
}

func (e DiskType) String() string {
	return string(e)
}

func (e *DiskType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DiskType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DiskType", str)
	}
	return nil
}

func (e DiskType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
