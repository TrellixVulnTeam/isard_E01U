version: '3.2'
services:
  redis:
    image: "redis:6"
    restart: always
  postgres:
    image: "postgres:13"
    restart: always
    environment:
      - POSTGRES_USER=isard
      - POSTGRES_PASSWORD=isard
    ports:
      - "5433:5432"
  hyper:
    build:
      context: .
      dockerfile: hyper/build/package/Dockerfile
    image: "isard/isardvdi-hyper:${VERSION-latest}"
    restart: always
    privileged: true
    depends_on:
      - redis
    volumes:
      - /opt/isard/disks:/opt/isard/disks
    environment:
      - HYPER_REDIS_HOST=redis
  desktopbuilder:
    build:
      context: .
      dockerfile: desktopbuilder/build/package/Dockerfile
    image: "isard/isardvdi-desktopbuilder:${VERSION-latest}"
    restart: always
    depends_on:
      - postgres
    environment:
      - DESKTOPBUILDER_DB_HOST=postgres
      - DESKTOPBUILDER_DB_USR=isard
      - DESKTOPBUILDER_DB_PWD=isard
  diskoperations:
    build:
      context: .
      dockerfile: diskoperations/build/package/Dockerfile
    image: "isard/isardvdi-diskoperations:${VERSION-latest}"
    restart: always
    depends_on:
      - postgres
    volumes:
      - /opt/isard/disks:/opt/isard/disks
    environment:
      - DISKOPERATIONS_DB_HOST=postgres
      - DISKOPERATIONS_DB_USR=isard
      - DISKOPERATIONS_DB_PWD=isard
  orchestrator:
    build:
      context: .
      dockerfile: orchestrator/build/package/Dockerfile
    image: "isard/isardvdi-orchestrator:${VERSION-latest}"
    restart: always
    depends_on:
      - redis
    environment:
      - ORCHESTRATOR_REDIS_HOST=redis
  controller:
    build:
      context: .
      dockerfile: controller/build/package/Dockerfile
    image: "isard/isardvdi-controller:${VERSION-latest}"
    restart: always
    depends_on:
      - hyper
      - desktopbuilder
      - orchestrator
      - redis
    environment:
      - CONTROLLER_REDIS_HOST=redis
  auth:
    build:
      context: .
      dockerfile: auth/build/package/Dockerfile
    image: "isard/isardvdi-auth:${VERSION-latest}"
    restart: always
    depends_on:
      - postgres
      - redis
    environment:
      - AUTH_REDIS_HOST=redis
      - AUTH_DB_HOST=postgres
      - AUTH_DB_USR=isard
      - AUTH_DB_PWD=isard
  backend:
    build:
      context: .
      dockerfile: backend/build/package/Dockerfile
    image: "isard/isardvdi-backend:${VERSION-latest}"
    restart: always
    ports:
      - "1312:1312"
    depends_on:
      - postgres
      - auth
      - controller
      - diskoperations
    environment:
      - BACKEND_DB_HOST=postgres
      - BACKEND_DB_USR=isard
      - BACKEND_DB_PWD=isard
  graphql-engine:
    image: hasura/graphql-engine:v1.3.3
    ports:
    - "8080:8080"
    depends_on:
    - "postgres"
    restart: always
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://isard:isard@postgres:5432/isard
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_ADMIN_SECRET: "isard"
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_AUTH_HOOK: "http://auth:1313/webhook"
