// Code generated by protoc-gen-go-grpc-mock (https://github.com/nefixestrada/protoc-gen-go-grpc-mock). DO NOT EDIT.
// version: v0.2.0

package proto

import (
	context "context"
	mock "github.com/stretchr/testify/mock"
	grpc "google.golang.org/grpc"
	net "net"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// NewControllerServiceMock creates and starts a Controller service mock.
// it returns the mock and a client for the
func NewControllerServiceMock() (*ControllerServiceMock, ControllerClient, error) {
	addr, err := net.ResolveTCPAddr("tcp", "localhost:0")
	if err != nil {
		return nil, nil, err
	}

	lis, err := net.ListenTCP("tcp", addr)
	if err != nil {
		return nil, nil, err
	}

	s := grpc.NewServer()
	m := &ControllerServiceMock{server: s}

	RegisterControllerServer(s, m)

	go s.Serve(lis)

	cc, err := grpc.Dial(lis.Addr().String(), grpc.WithInsecure())
	if err != nil {
		return nil, nil, err
	}
	m.cc = cc

	cli := NewControllerClient(cc)

	return m, cli, nil
}

// ControllerServiceMock is a mock for the ControllerService service.
type ControllerServiceMock struct {
	mock.Mock
	server *grpc.Server
	cc     *grpc.ClientConn
	UnimplementedControllerServer
}

func (m *ControllerServiceMock) Stop() {
	m.cc.Close()
	m.server.Stop()
}

const DesktopList = "DesktopList"

func (m *ControllerServiceMock) DesktopList(ctx context.Context, in *DesktopListRequest) (*DesktopListResponse, error) {
	args := m.Called(ctx, in)
	return args.Get(0).(*DesktopListResponse), args.Error(1)
}

const DesktopStart = "DesktopStart"

func (m *ControllerServiceMock) DesktopStart(ctx context.Context, in *DesktopStartRequest) (*DesktopStartResponse, error) {
	args := m.Called(ctx, in)
	return args.Get(0).(*DesktopStartResponse), args.Error(1)
}

const DesktopStop = "DesktopStop"

func (m *ControllerServiceMock) DesktopStop(ctx context.Context, in *DesktopStopRequest) (*DesktopStopResponse, error) {
	args := m.Called(ctx, in)
	return args.Get(0).(*DesktopStopResponse), args.Error(1)
}

const ViewerGet = "ViewerGet"

func (m *ControllerServiceMock) ViewerGet(ctx context.Context, in *ViewerGetRequest) (*ViewerGetResponse, error) {
	args := m.Called(ctx, in)
	return args.Get(0).(*ViewerGetResponse), args.Error(1)
}
