// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// DesktopBuilderClient is the client API for DesktopBuilder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DesktopBuilderClient interface {
	XMLGet(ctx context.Context, in *XMLGetRequest, opts ...grpc.CallOption) (*XMLGetResponse, error)
	ViewerGet(ctx context.Context, in *ViewerGetRequest, opts ...grpc.CallOption) (*ViewerGetResponse, error)
}

type desktopBuilderClient struct {
	cc grpc.ClientConnInterface
}

func NewDesktopBuilderClient(cc grpc.ClientConnInterface) DesktopBuilderClient {
	return &desktopBuilderClient{cc}
}

func (c *desktopBuilderClient) XMLGet(ctx context.Context, in *XMLGetRequest, opts ...grpc.CallOption) (*XMLGetResponse, error) {
	out := new(XMLGetResponse)
	err := c.cc.Invoke(ctx, "/com.gitlab.isard.isardvdi.desktopbuilder.DesktopBuilder/XMLGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *desktopBuilderClient) ViewerGet(ctx context.Context, in *ViewerGetRequest, opts ...grpc.CallOption) (*ViewerGetResponse, error) {
	out := new(ViewerGetResponse)
	err := c.cc.Invoke(ctx, "/com.gitlab.isard.isardvdi.desktopbuilder.DesktopBuilder/ViewerGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DesktopBuilderServer is the server API for DesktopBuilder service.
// All implementations must embed UnimplementedDesktopBuilderServer
// for forward compatibility
type DesktopBuilderServer interface {
	XMLGet(context.Context, *XMLGetRequest) (*XMLGetResponse, error)
	ViewerGet(context.Context, *ViewerGetRequest) (*ViewerGetResponse, error)
	mustEmbedUnimplementedDesktopBuilderServer()
}

// UnimplementedDesktopBuilderServer must be embedded to have forward compatible implementations.
type UnimplementedDesktopBuilderServer struct {
}

func (UnimplementedDesktopBuilderServer) XMLGet(context.Context, *XMLGetRequest) (*XMLGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method XMLGet not implemented")
}
func (UnimplementedDesktopBuilderServer) ViewerGet(context.Context, *ViewerGetRequest) (*ViewerGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewerGet not implemented")
}
func (UnimplementedDesktopBuilderServer) mustEmbedUnimplementedDesktopBuilderServer() {}

// UnsafeDesktopBuilderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DesktopBuilderServer will
// result in compilation errors.
type UnsafeDesktopBuilderServer interface {
	mustEmbedUnimplementedDesktopBuilderServer()
}

func RegisterDesktopBuilderServer(s *grpc.Server, srv DesktopBuilderServer) {
	s.RegisterService(&_DesktopBuilder_serviceDesc, srv)
}

func _DesktopBuilder_XMLGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XMLGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesktopBuilderServer).XMLGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gitlab.isard.isardvdi.desktopbuilder.DesktopBuilder/XMLGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesktopBuilderServer).XMLGet(ctx, req.(*XMLGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DesktopBuilder_ViewerGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewerGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesktopBuilderServer).ViewerGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.gitlab.isard.isardvdi.desktopbuilder.DesktopBuilder/ViewerGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesktopBuilderServer).ViewerGet(ctx, req.(*ViewerGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DesktopBuilder_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.gitlab.isard.isardvdi.desktopbuilder.DesktopBuilder",
	HandlerType: (*DesktopBuilderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "XMLGet",
			Handler:    _DesktopBuilder_XMLGet_Handler,
		},
		{
			MethodName: "ViewerGet",
			Handler:    _DesktopBuilder_ViewerGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/desktopbuilder.proto",
}
